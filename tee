    |\^/|     Maple 2020 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2020
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.

> libname := libname, "/home/data/archiv/daniel/maple/lib10/";
    libname := "/opt/maple2020/lib", "/home/data/archiv/daniel/maple/lib10/"

> with(LinearAlgebra);
[&x, Add, Adjoint, BackwardSubstitute, BandMatrix, Basis, BezoutMatrix,

    BidiagonalForm, BilinearForm, CARE, CharacteristicMatrix,

    CharacteristicPolynomial, Column, ColumnDimension, ColumnOperation,

    ColumnSpace, CompanionMatrix, CompressedSparseForm, ConditionNumber,

    ConstantMatrix, ConstantVector, Copy, CreatePermutation, CrossProduct, DARE,

    DeleteColumn, DeleteRow, Determinant, Diagonal, DiagonalMatrix, Dimension,

    Dimensions, DotProduct, EigenConditionNumbers, Eigenvalues, Eigenvectors,

    Equal, ForwardSubstitute, FrobeniusForm, FromCompressedSparseForm,

    FromSplitForm, GaussianElimination, GenerateEquations, GenerateMatrix,

    Generic, GetResultDataType, GetResultShape, GivensRotationMatrix,

    GramSchmidt, HankelMatrix, HermiteForm, HermitianTranspose, HessenbergForm,

    HilbertMatrix, HouseholderMatrix, IdentityMatrix, IntersectionBasis,

    IsDefinite, IsOrthogonal, IsSimilar, IsUnitary, JordanBlockMatrix,

    JordanForm, KroneckerProduct, LA_Main, LUDecomposition, LeastSquares,

    LinearSolve, LyapunovSolve, Map, Map2, MatrixAdd, MatrixExponential,

    MatrixFunction, MatrixInverse, MatrixMatrixMultiply, MatrixNorm,

    MatrixPower, MatrixScalarMultiply, MatrixVectorMultiply, MinimalPolynomial,

    Minor, Modular, Multiply, NoUserValue, Norm, Normalize, NullSpace,

    OuterProductMatrix, Permanent, Pivot, PopovForm, ProjectionMatrix,

    QRDecomposition, RandomMatrix, RandomVector, Rank, RationalCanonicalForm,

    ReducedRowEchelonForm, Row, RowDimension, RowOperation, RowSpace,

    ScalarMatrix, ScalarMultiply, ScalarVector, SchurForm, SingularValues,

    SmithForm, SplitForm, StronglyConnectedBlocks, SubMatrix, SubVector,

    SumBasis, SylvesterMatrix, SylvesterSolve, ToeplitzMatrix, Trace, Transpose,

    TridiagonalForm, UnitVector, VandermondeMatrix, VectorAdd, VectorAngle,

    VectorMatrixMultiply, VectorNorm, VectorScalarMultiply, ZeroMatrix,

    ZeroVector, Zip]

> with(SimplicialSurfaceEmbeddings);
[AddFace, AddGeodesic, AlignBoundaries, AlignSurfaces, AnimateSurface,

    AttachButterfly, AttachFace, Barycenter, Boundary, CoordinateMatrix,

    CopySurface, Curvature, DefineEmbedding, DevelopGeodesic, DihedralAngle,

    DrawSurface, DuplicateEmbedding, EdgeLengths, EdgeTypes, EdgeVectors, Edges,

    EulerCharacteristic, ExtendGeodesic, FaceCongruenceTypes, Faces,

    FieldExtension, FitButterfly, GeodesicDressWord, GeodesicEdgeList,

    GeodesicIntercepts, GramMatrix, IsConvex, NewSurface, NumberEmbeddedFaces,

    NumberEmbeddedVertices, NumberEmbeddings, NumberGeodesics,

    ParameterConstraints, ParameterValues, Parameters, PasteButterfly,

    PasteFace, PlanarAngle, PresentationFieldExtension,

    RemoveDuplicateEmbeddings, RemoveEdge, RemoveEmbedding, RemoveFace,

    RemoveGeodesic, RemoveVertex, RenameVertices, RepresentationOverRationals,

    RigidMotion, SelectEmbeddings, SimplicialSurfaceEmbeddingsOptions,

    SortEmbeddings, SpecializeParameters, SquareDistance, SubsetEmbeddings,

    SurfaceInfo, VertexDegrees, Vertices, Volume]

> SimplicialSurfaceEmbeddingsOptions("vertexfaithful", true);
                                     false



> s := NewSurface();
                                  s := Surface


> AddFace(s, [1, 32, 33]);
> AttachFace(s, [32, 33], 24);
> AttachButterfly(s, [1, 33], [33, 24], 34);
> AttachButterfly(s, [1, 34], [34, 24], 35);

> AttachFace(s, [1, 32], 4);
> AttachButterfly(s, [35, 1], [1, 4], 36);
memory used=31.7MB, alloc=78.3MB, time=0.94
> AttachButterfly(s, [4, 32], [32, 24], 37);
memory used=92.1MB, alloc=84.3MB, time=2.48
memory used=142.9MB, alloc=116.3MB, time=3.68
memory used=200.1MB, alloc=116.3MB, time=5.13
> AttachButterfly(s, [36, 35], [35, 24], 27);
memory used=289.4MB, alloc=112.3MB, time=7.60
memory used=383.8MB, alloc=119.7MB, time=9.70
memory used=480.1MB, alloc=120.0MB, time=11.84
memory used=569.7MB, alloc=120.0MB, time=14.11
memory used=673.2MB, alloc=136.1MB, time=16.03
memory used=763.9MB, alloc=136.1MB, time=18.30
memory used=853.1MB, alloc=136.1MB, time=20.32
memory used=938.6MB, alloc=136.1MB, time=22.25
memory used=1024.3MB, alloc=136.1MB, time=23.93
memory used=1111.3MB, alloc=136.1MB, time=26.10
memory used=1199.5MB, alloc=168.1MB, time=28.26
memory used=1323.4MB, alloc=168.1MB, time=31.13
memory used=1440.5MB, alloc=168.1MB, time=33.44
memory used=1558.7MB, alloc=168.1MB, time=36.38
memory used=1681.4MB, alloc=168.1MB, time=39.12
memory used=1799.7MB, alloc=168.1MB, time=41.66
memory used=1921.7MB, alloc=168.1MB, time=44.45
memory used=2043.8MB, alloc=168.1MB, time=46.79
memory used=2123.7MB, alloc=168.1MB, time=48.47
memory used=2204.0MB, alloc=168.1MB, time=50.34
memory used=2321.2MB, alloc=178.7MB, time=53.27
memory used=2416.4MB, alloc=178.7MB, time=54.65
memory used=2484.2MB, alloc=178.7MB, time=55.41
memory used=2542.7MB, alloc=178.7MB, time=56.11
memory used=2618.8MB, alloc=178.7MB, time=56.92
memory used=2682.1MB, alloc=178.7MB, time=57.62
memory used=2746.4MB, alloc=178.7MB, time=58.32
memory used=2811.3MB, alloc=178.7MB, time=59.07
memory used=2873.7MB, alloc=178.7MB, time=59.77
memory used=2931.7MB, alloc=187.8MB, time=60.54
memory used=2954.2MB, alloc=187.8MB, time=60.94
Interrupted

> PasteFace(s, [36, 4], [4, 37]);
memory used=3013.0MB, alloc=179.8MB, time=94.40
memory used=3060.5MB, alloc=179.8MB, time=115.35
memory used=3111.8MB, alloc=179.8MB, time=138.22
memory used=3168.0MB, alloc=179.8MB, time=172.81
memory used=3234.3MB, alloc=179.8MB, time=193.48
memory used=3334.4MB, alloc=179.8MB, time=203.16
memory used=3400.7MB, alloc=179.8MB, time=224.43
memory used=3469.2MB, alloc=179.8MB, time=256.01
memory used=3544.9MB, alloc=179.8MB, time=275.14
memory used=3622.6MB, alloc=179.8MB, time=305.89
memory used=3720.2MB, alloc=179.8MB, time=327.11
memory used=3810.2MB, alloc=211.8MB, time=337.22
memory used=3901.6MB, alloc=211.8MB, time=365.61
memory used=3994.4MB, alloc=211.8MB, time=402.66
memory used=4119.7MB, alloc=211.8MB, time=421.82
memory used=4227.5MB, alloc=211.8MB, time=422.52
memory used=4354.1MB, alloc=211.8MB, time=450.83
memory used=4471.4MB, alloc=211.8MB, time=498.11
memory used=4587.6MB, alloc=211.8MB, time=534.72
memory used=4709.7MB, alloc=211.8MB, time=561.67
memory used=4825.9MB, alloc=211.8MB, time=579.11
memory used=4933.8MB, alloc=211.8MB, time=587.37
memory used=5058.7MB, alloc=211.8MB, time=618.77
memory used=5187.0MB, alloc=211.8MB, time=668.24
memory used=5305.8MB, alloc=211.8MB, time=692.75
memory used=5415.4MB, alloc=211.8MB, time=708.40
memory used=5510.8MB, alloc=211.8MB, time=709.00
memory used=5613.1MB, alloc=211.8MB, time=716.90
memory used=5712.9MB, alloc=243.8MB, time=740.52
memory used=5855.4MB, alloc=243.8MB, time=776.56
memory used=5971.5MB, alloc=243.8MB, time=783.32
memory used=6111.7MB, alloc=243.8MB, time=836.68
memory used=6229.4MB, alloc=243.8MB, time=847.98
memory used=6379.5MB, alloc=243.8MB, time=851.45
memory used=6539.0MB, alloc=243.8MB, time=856.19
memory used=6701.7MB, alloc=243.8MB, time=860.91
memory used=6862.7MB, alloc=243.8MB, time=865.62
memory used=7023.9MB, alloc=275.8MB, time=869.66
memory used=7241.7MB, alloc=275.8MB, time=875.36
memory used=7424.2MB, alloc=275.8MB, time=881.07
memory used=7617.2MB, alloc=275.8MB, time=886.84
Interrupted
> PasteFace(s, [37, 24], [24, 27]);
Error, (in SimplicialSurfaceEmbeddings/PasteFace) second vertex of second given
edge does not exist.
> PasteFace(s, [37, 36], [36, 37]);
Error, (in SimplicialSurfaceEmbeddings/PasteFace) second given edge does not
exist.


> NULL;
> NULL;
> NULL;

> SurfaceInfo(s);
V: [1, 32, 33, 24, 34, 35, 4, 36, 37]
E: [[1, 32], [32, 33], [33, 1], [32, 24], [24, 33], [33, 34], [34, 1], [24, 34], [34, 35], [35, 1], [24, 35], [1, 4], [4, 32], [35, 36], [36, 1], [36, 4], [4, 37], [37, 32], [37, 24]]
F: [[1, 32, 33], [33, 32, 24], [33, 34, 1], [34, 33, 24], [34, 35, 1], [35, 34, 24], [32, 1, 4], [35, 36, 1], [36, 4, 1], [4, 37, 32], [37, 24, 32]]

1: embedding depending on 2 parameters over (extension of) Q(3^(1/2))
2: embedding depending on 2 parameters over (extension of) Q(3^(1/2))
3: embedding depending on 2 parameters over (extension of) Q(3^(1/2))
4: embedding depending on 2 parameters over (extension of) Q(3^(1/2))

> coords := CoordinateMatrix(s, 1, "listlist" = true);
                                        1/2
                                       3
coords := [[0, 0, 0], [1, 0, 0], [1/2, ----, 0],
                                        2

                             1/2        1/2
             1              3          3    _t[4]
    [3/2 ----------, 1/2 ----------, - ----------],
              2               2             2
         _t[4]  + 1      _t[4]  + 1    _t[4]  + 1

              2             2  1/2       1/2
       2 _t[4]  - 1  2 _t[4]  3       2 3    _t[4]
    [- ------------, -------------, - ------------], [
              2             2                2
       4 _t[4]  + 1  4 _t[4]  + 1     4 _t[4]  + 1

                 4           2              1/2         2
         32 _t[4]  - 32 _t[4]  - 1         3    (8 _t[4]  - 1)
    -1/2 -------------------------, -1/2 ------------------------,
                 4          2                    4          2
         16 _t[4]  + 8 _t[4]  + 1        16 _t[4]  + 8 _t[4]  + 1

         1/2               2                   1/2       2          1/2
      2 3    _t[4] (8 _t[4]  - 1)             3    (_t[7]  - 1)    3    _t[7]
    - ---------------------------], [1/2, 1/2 -----------------, - ----------],
               4          2                           2                 2
       16 _t[4]  + 8 _t[4]  + 1                  _t[7]  + 1        _t[7]  + 1

                  1/2   1/2      3      2        1/2   1/2      2
    [- (-1 + 48 %6    %5    _t[4]  _t[7]  + 24 %6    %5    _t[4]  _t[7]

           1/2   1/2            2        1/2   1/2      3       1/2   1/2
     - 6 %6    %5    _t[4] _t[7]  - 48 %6    %5    _t[4]  + 6 %6    %5    _t[4]

           1/2   1/2                  8      4           3      3
     - 3 %6    %5    _t[7] + 128 _t[4]  _t[7]  - 48 _t[4]  _t[7]

               3                                  8      2            7      3
     - 48 _t[4]  _t[7] - 4 _t[4] _t[7] + 256 _t[4]  _t[7]  - 256 _t[4]  _t[7]

                6      4            7                  6      2
     - 288 _t[4]  _t[7]  - 256 _t[4]  _t[7] - 640 _t[4]  _t[7]

                5      3           4      4            5
     + 672 _t[4]  _t[7]  - 96 _t[4]  _t[7]  + 672 _t[4]  _t[7]

              2      4                3            8        2
     - 4 _t[4]  _t[7]  - 4 _t[4] _t[7]  + 128 _t[4]  - _t[7]

               2      2           4      2            6           4           2
     - 20 _t[4]  _t[7]  - 24 _t[4]  _t[7]  - 352 _t[4]  + 72 _t[4]  - 16 _t[4]

             1/2       1/2   1/2      3      2        1/2   1/2      2
    )/(%4), 3    (16 %6    %5    _t[4]  _t[7]  - 32 %6    %5    _t[4]  _t[7]

           1/2   1/2            2        1/2   1/2      4
     - 2 %6    %5    _t[4] _t[7]  + 32 %6    %5    _t[4]  _t[7]

            1/2   1/2      3       1/2   1/2           1/2   1/2
     + 16 %6    %5    _t[4]  - 2 %6    %5    _t[4] - %6    %5    _t[7]

                8      4           3      3           3
     + 128 _t[4]  _t[7]  - 32 _t[4]  _t[7]  - 32 _t[4]  _t[7]

                7      3           6      4            7
     - 256 _t[4]  _t[7]  + 32 _t[4]  _t[7]  + 256 _t[4]  _t[7]

                6      2           5      3           4      4
     - 192 _t[4]  _t[7]  + 32 _t[4]  _t[7]  + 16 _t[4]  _t[7]

                5                2      4                3            8
     + 224 _t[4]  _t[7] + 4 _t[4]  _t[7]  + 4 _t[4] _t[7]  - 128 _t[4]

            2          2      2          4      2           6           4
     + _t[7]  - 4 _t[4]  _t[7]  - 8 _t[4]  _t[7]  - 96 _t[4]  + 24 _t[4]

              2                    8      3            7      4
     - 8 _t[4] )/(%4), - (256 _t[4]  _t[7]  + 256 _t[4]  _t[7]

                8                  6      3           5      4
     + 256 _t[4]  _t[7] - 320 _t[4]  _t[7]  + 32 _t[4]  _t[7]

            1/2   1/2      4      2            7            6
     - 16 %6    %5    _t[4]  _t[7]  + 256 _t[4]  - 448 _t[4]  _t[7]

                5      2            4      3          3      4
     - 256 _t[4]  _t[7]  + 176 _t[4]  _t[7]  - 8 _t[4]  _t[7]

            1/2   1/2      4        1/2   1/2      2      2           5
     + 16 %6    %5    _t[4]  + 20 %6    %5    _t[4]  _t[7]  - 96 _t[4]

                4                 3      2          2      3
     + 128 _t[4]  _t[7] + 16 _t[4]  _t[7]  - 4 _t[4]  _t[7]

            1/2   1/2      2           3          2                      2
     - 12 %6    %5    _t[4]  + 24 _t[4]  - 4 _t[4]  _t[7] + 2 _t[4] _t[7]

         1/2   1/2                     1/2                   4      4
     - %6    %5    - 2 _t[4] + _t[7]) 3   /(%4)], [1/2 (_t[4]  _t[7]

              4      2          3      3          2      4
     + 2 _t[4]  _t[7]  - 2 _t[4]  _t[7]  + 3 _t[4]  _t[7]

           1/2   1/2            2        4          3                 2      2
     - 2 %3    %2    _t[4] _t[7]  + _t[4]  - 2 _t[4]  _t[7] - 17 _t[4]  _t[7]

                    3          4       1/2   1/2             1/2   1/2
     - 8 _t[4] _t[7]  + 2 _t[7]  + 2 %3    %2    _t[4] + 2 %3    %2    _t[7]

              2                           2                  4      4
     + 4 _t[4]  + 16 _t[4] _t[7] + 8 _t[7] )/(%1), 1/6 (_t[4]  _t[7]

              3      3          2      4       1/2   1/2      2
     - 6 _t[4]  _t[7]  + 3 _t[4]  _t[7]  + 4 %3    %2    _t[4]  _t[7]

           1/2   1/2            2        4          3                2      2
     - 2 %3    %2    _t[4] _t[7]  - _t[4]  + 6 _t[4]  _t[7] + 5 _t[4]  _t[7]

                     3          4       1/2   1/2             1/2   1/2
     - 12 _t[4] _t[7]  + 2 _t[7]  - 2 %3    %2    _t[4] - 2 %3    %2    _t[7]

              2          2   1/2             1/2       4      3        3      4
     - 4 _t[4]  + 8 _t[7] ) 3   /(%1), -1/3 3    (_t[4]  _t[7]  + _t[4]  _t[7]

         1/2   1/2      2      2        4                3      2
     - %3    %2    _t[4]  _t[7]  + _t[4]  _t[7] - 4 _t[4]  _t[7]

              2      3              4     1/2   1/2      2     1/2   1/2      2
     - 4 _t[4]  _t[7]  + _t[4] _t[7]  + %3    %2    _t[4]  + %3    %2    _t[7]

            3        2                    2        3
     + _t[4]  - _t[4]  _t[7] - _t[4] _t[7]  + _t[7]  + 4 _t[4] + 4 _t[7])/(%1)]

    ]

           4      4          4      2          3      3          2      4
%1 := _t[4]  _t[7]  + 2 _t[4]  _t[7]  - 4 _t[4]  _t[7]  + 2 _t[4]  _t[7]

            4          3                2      2                3        4
     + _t[4]  - 4 _t[4]  _t[7] - 6 _t[4]  _t[7]  - 4 _t[4] _t[7]  + _t[7]

              2                          2
     + 4 _t[4]  + 8 _t[4] _t[7] + 4 _t[7]

           2      2        2                        2
%2 := _t[4]  _t[7]  + _t[4]  - 6 _t[4] _t[7] + _t[7]  + 4

             2      2          2                          2
%3 := 2 _t[4]  _t[7]  + 2 _t[4]  + 6 _t[4] _t[7] + 2 _t[7]  - 1

               8      4            8      2             7      3
%4 := 256 _t[4]  _t[7]  + 512 _t[4]  _t[7]  + 1024 _t[4]  _t[7]

                6      4            8             7                   6      2
     + 384 _t[4]  _t[7]  + 256 _t[4]  + 1024 _t[4]  _t[7] - 2048 _t[4]  _t[7]

                5      3            4      4            6             5
     - 384 _t[4]  _t[7]  + 144 _t[4]  _t[7]  + 640 _t[4]  - 1920 _t[4]  _t[7]

                4      2           3      3           2      4            4
     + 960 _t[4]  _t[7]  - 96 _t[4]  _t[7]  + 16 _t[4]  _t[7]  - 144 _t[4]

                3                 2      2                 3           2
     + 288 _t[4]  _t[7] - 40 _t[4]  _t[7]  + 16 _t[4] _t[7]  + 40 _t[4]

                              2
     - 8 _t[4] _t[7] + 4 _t[7]  + 1

              4      2           4           3                2      2
%5 := 16 _t[4]  _t[7]  + 16 _t[4]  - 32 _t[4]  _t[7] + 4 _t[4]  _t[7]

              2
     - 4 _t[4]  + 4 _t[4] _t[7] + 1

              3                2      2           2                        2
%6 := 32 _t[4]  _t[7] + 4 _t[4]  _t[7]  + 12 _t[4]  - 4 _t[4] _t[7] + _t[7]


> EdgeLengths(s);
           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]


> vertices := [35, 4, 34, 24, 1, 33, 36, 32, 37, 27];
               vertices := [35, 4, 34, 24, 1, 33, 36, 32, 37, 27]

> maxVert := max(vertices);
                                 maxVert := 37

> coords := [(-1) $ maxVert];
coords := [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

    -1]

> for i to maxVert do
>     if i in vertices then coords[i] := evalf(CoordinateMatrix(s, 1, "listlist" = true, "vertices" = [i]))[1]; else coords[i] := []; end if;
> end do;
Error, (in SimplicialSurfaceEmbeddings/CoordinateMatrix) expecting a list of
names of vertices for option "vertices".
> coords;
[[0., 0., 0.], [], [],

                                      2
                   0.8660254040 (_t[7]  - 1.)    1.732050808 _t[7]
    [0.5000000000, --------------------------, - -----------------], [], [], [],
                               2                         2
                          _t[7]  + 1.               _t[7]  + 1.

    [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],

     1.500000000  0.8660254040    1.732050808 _t[4]
    [-----------, ------------, - -----------------], [], [], -1, -1, -1, -1,
          2            2                  2
     _t[4]  + 1.  _t[4]  + 1.        _t[4]  + 1.

    -1, -1, -1, -1, -1, -1, -1]








> quit
memory used=7714.8MB, alloc=275.8MB, time=889.34
